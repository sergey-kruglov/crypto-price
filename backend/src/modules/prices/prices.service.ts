import { Injectable, Logger } from '@nestjs/common';
import { Cron } from '@nestjs/schedule';
import { CryptoCurrencies } from '../../common/lib/crypto-currencies.enum';
import { PriceProviders } from '../price-providers/price-providers.enum';
import { PriceProvidersService } from '../price-providers/price-providers.service';
import { PricesRepository } from './prices.repository';
import { PriceData } from './prices.types';

@Injectable()
export class PricesService {
  private readonly logger = new Logger(PricesService.name);
  private readonly currencies: CryptoCurrencies[] = [];

  constructor(
    private readonly priceProvidersService: PriceProvidersService,
    private readonly pricesRepository: PricesRepository,
  ) {
    this.currencies = this.getCurrenciesList();
  }

  private getCurrenciesList(): CryptoCurrencies[] {
    const currencies: CryptoCurrencies[] = [];
    for (const key in CryptoCurrencies) {
      if (CryptoCurrencies.hasOwnProperty(key)) {
        currencies.push(CryptoCurrencies[key as CryptoCurrencies]);
      }
    }
    return currencies;
  }

  async getPrice(
    fromCurrency: CryptoCurrencies,
    toCurrency: CryptoCurrencies,
    updateCache: boolean = true,
  ): Promise<PriceData> {
    // no need to get or cache this case
    if (fromCurrency === toCurrency) {
      return {
        fromCurrency,
        toCurrency,
        price: 1,
      };
    }

    if (updateCache) {
      const cache = await this.getCache(fromCurrency, toCurrency);
      if (cache) return cache;
    }

    const provider = this.priceProvidersService.getProvider(
      PriceProviders.COIN_MARKET_CAP,
    );
    const price = await provider.getPrice(fromCurrency, toCurrency);
    const priceData: PriceData = {
      fromCurrency,
      toCurrency,
      price,
    };
    await this.pricesRepository.savePrice(priceData);

    return priceData;
  }

  private async getCache(
    fromCurrency: CryptoCurrencies,
    toCurrency: CryptoCurrencies,
  ): Promise<PriceData> {
    const price = await this.pricesRepository.getPrice(
      fromCurrency,
      toCurrency,
    );
    if (!price && price !== 0) return null;

    return {
      fromCurrency,
      toCurrency,
      price,
    };
  }

  async getCurrencies(): Promise<CryptoCurrencies[]> {
    return this.currencies;
  }

  /**
   * Dataset generated by this cron can be used to show historical cryptocurrency data.
   */
  @Cron('0 * * * * *')
  async updatePriceCache(): Promise<void> {
    this.logger.log('start updatePriceCache cron');

    for (const fromCurrency of this.currencies) {
      for (const toCurrency of this.currencies) {
        this.getPrice(fromCurrency, toCurrency, false).catch((err) =>
          this.logger.error({
            message: 'update price error',
            error: err.message,
            fromCurrency,
            toCurrency,
          }),
        );
      }
    }
  }
}
